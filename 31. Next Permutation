class Solution {
    public void rev(int nums[], int low, int high) {
        while (low <= high) {
            int temp = nums[low];
            nums[low] = nums[high];
            nums[high] = temp;
            low++;
            high--;
        }
    }
    public void nextPermutation(int[] nums) {
        // 1.finding the breakpoint
        int ind = -1;
        int n = nums.length;
        for (int i = n - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                ind = i;
                break;
            }
        }
        // if no breakpoint i.e. last permutation so reverse
        if (ind == -1) {
            rev(nums, 0, n - 1);
        }
        // 2.find the element just greater than the breakpoint
        else {
            for (int i = n - 1; i >= 0; i--) {
                if (nums[i] > nums[ind]) {
                    //swap the 2 numbers
                    int temp = nums[i];
                    nums[i] = nums[ind];
                    nums[ind] = temp;
                    break;
                }
            }
            //reversing the rest of the array to get the closest possible permutation
            rev(nums, ind + 1, n - 1);
        }
        System.out.println(Arrays.toString(nums));
    }
}
